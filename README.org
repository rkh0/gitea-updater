* Gitea Updater

** Background

This is a handy script to update a [[https://gitea.io][gitea]] instance running on [[https://www.nearlyfreespeech.net/][NFSN]].
That said, you could probably easily adapt this script to another
system by changing a couple of lines of code.

** Before Starting

You probably want to read the following blog post before starting with
this script.

[[https://www.noamross.net/2019/12/15/git-hosting-for-the-distraught-and-the-restless/][Git Hosting for the Distraught and the Restless]]

It's the recommended tutorial for NFSN users, referenced from the NFSN
member wiki (not public).  It provides a recipe for installing gitea
on NFSN (as well as how to setup an account on NFSN if you want to try
that out); however, the system setup (at the shell command line) should
be the same for other hosting services and VPSes that are "UNIXy".

** Keeping Gitea Updated

*** "Fat, drunk and stupid is no way to go through life, Son."

Our script here picks up where that blog post leaves off.  I've been
running gitea on NFSN since early 2017 -- I started with gitea 1.0.2
to give you an idea -- and the problem with my admining (if you can
call it that) is that I tend to walk away and the system (gitea in
this instance) doesn't get updated for months or years.  That kinda
makes sense: it's not my VPS that I work on every day; it's more "out
of sight, out of mind", sadly.  And additionally, the hard-working
folks at NFSN are regularly updating the system around gitea (a
FreeBSD jail) and they do a great job (there have been no hiccups in
the years I've been with them) and that makes me even more SUUUUPER
LAZY. :)

*** Finally, Some Motivation

So, I finally sat down and wrote this script to do the job of
updating/upgrading the gitea instance and then deploying it.

So why write a script?  Two reasons:

- You should probably be upgrading gitea by successive releases (e.g,
  from release 1.2 to release 1.3) because if there are any changes to
  the database, gitea, which has built-in routines to do that, can do
  it safely.  Oh, you might be able to upgrade from release 1.0 to
  1.9, but I'm not entirely sure about that.  Anyway, if you "play it
  safe" as I do, this "dance" can become a tedious, error-prone chore
  when you have to do it manually and you are upteen versions behind
  the one you want to get to.

- I need to record how I did the upgrade (and deployment) and having a
  script is better than having mere notes.

*** Installation

This script is just a monolith. Put it somewhere on your PATH.  Voila!
Done.

*** Configuration

There is a section at the top of the script marked =CONFIGURATION=.
You might want to change the values of the variables found there to
suit your system and usage.

=_DEPLOY_DIR= is where the gitea instance is located on the file
system. =_BACKUP_DIR= is where the script stores your backups, which
are created before any upgrade. They are set to sane values for NFSN
users.

#+begin_src sh
_DEPLOY_DIR=/home/protected
_BACKUP_DIR=/home/private/backups
#+end_src

The variables =MAKE= and =TAR= should be set to the GNU versions of
these utilities on your system.  For instance, on a GNU/Linux-based
system, change these to =make= and =tar= respectively.  (These are set
for NFSN, which is a FreeBSD system.)

#+begin_src sh
MAKE=${MAKE:-gmake}
TAR=${TAR:-gtar}
#+end_src

*** Workflow

1. Before upgrading the gitea instance, go to the NFSN Management
   Console and stop the instance.

2. Log into the backend via ssh.

3. To jog my memory -- remember, this is probably Forgetful Me coming
   back to this weeks or months later -- about the state of the
   deployed version of gitea, versus the releases available to upgrade
   to (from the repo working directory), I just run the script without
   any arguments.

   #+begin_src
     $ upgrade-gitea-and-deploy
     Usage: upgrade-gitea-and-deploy [current_version] next_version

     Example: To upgrade to release 1.3 say: upgrade-gitea-and-deploy 1.3

     Deployed version is: 1.10 (1.10.6).
     Working (build) directory version is: 1.10.
     Releases (beyond the currently deployed release) to which you could upgrade:
     1.11
     1.12 (no tag!)
   #+end_src

   This shows that the deployed version is at release 1.10 (and namely
   at 1.10.6) and then shows a list of release versions beyond 1.10
   that I could upgrade to.

4. I usually upgrade one release at a time (not "jumping" releases) to
   allow gitea to update the DB for me (there are internal routines
   that do that). So, the command to update in this situation would
   be:

   #+begin_src
     $ upgrade-gitea-and-deploy 1.11
   #+end_src

   This will:
   - backup the files in the deployment directory (so that you can
     recover from a failed upgrade, should that happen),
   - checkout the given release of gitea and build it, and
   - copy the new version of gitea into the deployment directory.
  
5. If all goes well, go to the NFSN Management Console and restart the
   gitea instance.

*** Aside: Tag Notation

Notice that in step 3 above, release 1.12 was noted as having no
tag. This could mean that the developers really haven't finished with
(i.e., haven't frozen) that release branch yet. In that case, I might
not want to upgrade to that version yet, and perhaps wait to see if
more commits go on that 1.12 branch (i.e., =origin/release/v1.12=)
before I upgrade to that one.

But, a /nota bene/ on that. The rule that "release branches that are
complete get tagged" is not a hard-and-fast one. That has happened for
the most part in the gitea project but there were some exceptions. For
instance, as of this writing, we are beyond releases 1.8 and 1.9;
however, they were never tagged. So, the absence of a tag on the
release branch doesn't necessarily mean that it is still being
developed. I hope that's clear.


** Other Notes

*** Restoring from backups

If an upgrade fails, you should be able to "rollback" to the last good
release by restoring from backups.  The script will not do that for
you.  The backups are in the form of =.tgz= (gzipped tar files) in the
backup directory (by default, =/home/private/backups=).  You'll have
to have some facility with the =tar= utility.  If you don't, running
=man tar= in the shell is a good place to start.

*** Saving on disk usage

Notice that the blog post author deletes to =GOPATH= directory
entirely, after he builds gitea. I think this may be because he
doesn't want to pay the extra cost of disk usage on NFSN.  In this
case, this script can still be used to upgrade the gitea instance
because it will recover the =GOPATH= directory by downloading again
the code for gitea and its dependencies.  See the section below,
*Addendum: Initial Install* to see that in action.  If you too want to
save on the disk space, you should be able to delete the =GOPATH=
directory when the script has completed the upgrade and deployment.

*** Auto-creation of NFSN run script

This script will also generate an "NFSN run script" for the gitea
instance and drop it in the deployment directory. (This is like the
one I'm using that creates a runtime log file.)  Also, see this
facility in action in the section *Addendum: Initial Install*.


** Addendum: Initial Install

Turns out that you can also use this script for the initial install
(as well as for its original purpose: to perform upgrades).  The
scenario goes like this.

1. Create an NFSN (Custom) site, as the blog post directs.
2. ssh into the backend of that (new) site.
3. =cd $HOME=
4. =git clone https://github.com/rkh0/gitea-updater.git=
5. Setup =GOPATH=. =export GOPATH=$HOME/go= will do.
6. Running =gitea-updater/upgrade-gitea-and-deploy= will download the
   code. Be patient, the download takes few minutes.  Then, finally,
   you'll see something like the following message before you get the
   prompt back.

   #+begin_example
     Deployed version is: NONE (NONE).
     Working (build) directory version is: master.
     Here are the releases of gitea that you could build and deploy:
     0.9 (no tag!)
     1.0 (no tag!)
     1.1
     1.2
     1.3
     1.4
     1.5
     1.6
     1.7
     1.8 (no tag!)
     1.9 (no tag!)
     1.10
     1.11
     1.12 (no tag!)
   #+end_example

7. Pick one of the releases on this list and rerun the script with it
   as an argument, like this:

   #+begin_example
     $ gitea-updater/upgrade-gitea-and-deploy 1.10
   #+end_example

   This will start a build of that release.  When that is finished,
   the gitea binary will be deployed to the deployment directory (by
   default =/home/protected=).

8. The script dropped an NFSN run script (for the gitea instance) in
   the deployment directory.  You need to go there and rename it.

   #+begin_example
     $ cd /home/protected
     $ ls -l
     total 158804
     -rwxrwxr-x  1 999999  web     62222320 Jul  6 03:38 gitea
     -rwxrwxr-x  1 999999  web     62222320 Jul  6 03:38 gitea-v1.10
     -rwxrwxr-x  1 999999  web          172 Jul  6 03:32 RENAME-ME-TO-run-gitea.sh
     $ mv RENAME-ME-TO-run-gitea.sh run-gitea.sh
   #+end_example

   (The script isn't heavy-handed and doesn't want to accidently
   override a run script that you might already have installed --
   that's why the funny name and the necessity of the manual rename.)

9. You should be able now to follow the rest of the blog post
   directions, i.e. go back to the NFSN Managament Console and wire up
   the run script and the proxy parameters and kick off the site.

10. Go to you site and click on any one of the links (like "Explore");
    you should be taken to the *Initial Configuration* page, i.e., it
    redirects you to the =/install= URI path).  These are the settings
    I recommend for NFSN.

    - *Database Type*: SQLite3

    - *Path*: =/home/protected/data/gitea.db= /this is the default
      setting/

    - All other paths, put under =/home/protected=.

    - I blanked (thus disabling) *Git LFS Root Path*.

    - I blanked *SSH Server Port*.  NFSN won't allow ssh access for
      your gitea users.
